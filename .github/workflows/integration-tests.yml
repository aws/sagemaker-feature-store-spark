name: Integration Tests

on:
  workflow_run:
    workflows:
      - Build
    types:
      - completed

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      id-token: write
      contents: write
      actions: read

    # Run only if a successful PR request build workflow triggered the integration tests
    if: >
      github.event.workflow_run.event == 'pull_request' &&
      github.event.workflow_run.conclusion == 'success'
    steps:

      # Set up and install required dependencies
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install --upgrade boto3

      # Configure AWS credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: us-west-2
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
          role-session-name: GithubSession

      # Download processed artifacts generated from build workflow
      - name: 'Download Build Artifacts'
        uses: actions/github-script@v3.1.0
        with:
          script: |
            var artifacts = await github.actions.listWorkflowRunArtifacts({
               owner: context.repo.owner,
               repo: context.repo.repo,
               run_id: ${{github.event.workflow_run.id }},
            });
            var matchArtifact = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name == "processedArtifacts"
            })[0];
            var download = await github.actions.downloadArtifact({
               owner: context.repo.owner,
               repo: context.repo.repo,
               artifact_id: matchArtifact.id,
               archive_format: 'zip',
            });
            var fs = require('fs');
            fs.writeFileSync('${{github.workspace}}/processedArtifacts.zip', Buffer.from(download.data));

      # Unzip the build artifacts and run integration tests      
      - name: Run Integration Tests
        run: |
          unzip processedArtifacts.zip
          cd integration_test
          chmod +x run-spark-integration-test
          ./run-spark-integration-test
